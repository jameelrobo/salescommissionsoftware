--
-- Script was generated by Devart dbForge Studio 2022 for MySQL, Version 9.1.21.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 10-02-2023 16:45:16
-- Server version: 8.0.32
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE `barcosalescommission-updated`;

--
-- Drop procedure `GetAllfactorycategory`
--
DROP PROCEDURE IF EXISTS GetAllfactorycategory;

--
-- Drop procedure `IsExistCustomerInCommRules`
--
DROP PROCEDURE IF EXISTS IsExistCustomerInCommRules;

--
-- Drop procedure `IsExistCustomerInSalesTrasaction`
--
DROP PROCEDURE IF EXISTS IsExistCustomerInSalesTrasaction;

--
-- Drop procedure `IsExistFactoryIdInCommissionrules`
--
DROP PROCEDURE IF EXISTS IsExistFactoryIdInCommissionrules;

--
-- Drop procedure `IsExistFactoryIdInSalesTrasaction`
--
DROP PROCEDURE IF EXISTS IsExistFactoryIdInSalesTrasaction;

--
-- Drop procedure `IsExistSalesmanInCustomer`
--
DROP PROCEDURE IF EXISTS IsExistSalesmanInCustomer;

--
-- Drop procedure `sp_ActiveTransaction`
--
DROP PROCEDURE IF EXISTS sp_ActiveTransaction;

--
-- Drop procedure `sp_DeActiveTransaction`
--
DROP PROCEDURE IF EXISTS sp_DeActiveTransaction;

--
-- Drop procedure `sp_GetCommRules`
--
DROP PROCEDURE IF EXISTS sp_GetCommRules;

--
-- Drop procedure `sp_GetCustomersInfo`
--
DROP PROCEDURE IF EXISTS sp_GetCustomersInfo;

--
-- Drop procedure `SP_GetFactoryInfo`
--
DROP PROCEDURE IF EXISTS SP_GetFactoryInfo;

--
-- Drop procedure `sp_GetTransactionCustomers`
--
DROP PROCEDURE IF EXISTS sp_GetTransactionCustomers;

--
-- Drop procedure `sp_GetTransactionInfo`
--
DROP PROCEDURE IF EXISTS sp_GetTransactionInfo;

--
-- Drop procedure `sp_SearchTransactionInfoDatewise`
--
DROP PROCEDURE IF EXISTS sp_SearchTransactionInfoDatewise;

--
-- Drop procedure `sp_SearchTransactionInfoDatewise21`
--
DROP PROCEDURE IF EXISTS sp_SearchTransactionInfoDatewise21;

--
-- Drop procedure `sp_SearchTransactionInfoDatewiseUpdated`
--
DROP PROCEDURE IF EXISTS sp_SearchTransactionInfoDatewiseUpdated;

--
-- Set default database
--
USE `barcosalescommission-updated`;

DELIMITER $$

--
-- Create procedure `sp_SearchTransactionInfoDatewiseUpdated`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_SearchTransactionInfoDatewiseUpdated (IN start_date varchar(11), IN end_date varchar(11), IN IsDatewise boolean, IN IsCustId boolean)
BEGIN
  IF (IsDatewise) THEN
    IF (IsCustId) THEN
      SELECT
        *
      FROM salestrasaction s
      WHERE s.CreatedDate BETWEEN start_date AND end_date
      AND s.SalesmanCode IN (SELECT
          SalesmanCode
        FROM localpsaleman)

      AND s.FactoryName IN (SELECT
          FactoryName
        FROM localfactname)
      AND s.CustId IN (SELECT
          CustId
        FROM localcust)
      ORDER BY s.CreatedDate;
    ELSE
      SELECT
        *
      FROM salestrasaction s
      WHERE s.CreatedDate BETWEEN start_date AND end_date
      AND s.SalesmanCode IN (SELECT
          SalesmanCode
        FROM localpsaleman)

      AND s.FactoryName IN (SELECT
          FactoryName
        FROM localfactname)
      ORDER BY s.CreatedDate;
    END IF;


  ELSE
    IF (IsCustId) THEN
      SELECT
        *
      FROM salestrasaction s
      WHERE s.SalesmanCode IN (SELECT
          SalesmanCode
        FROM localpsaleman)

      AND s.FactoryName IN (SELECT
          FactoryName
        FROM localfactname)

      AND s.FinYear IN (SELECT
          Years
        FROM localyears)

      AND s.MonthName IN (SELECT
          Months
        FROM localmonths)
      AND s.CustId IN (SELECT
          CustId
        FROM localcust)
      ORDER BY s.FinYear, s.MonthName, s.SoldToName;
    ELSE
      SELECT
        *
      FROM salestrasaction s
      WHERE s.SalesmanCode IN (SELECT
          SalesmanCode
        FROM localpsaleman)

      AND s.FactoryName IN (SELECT
          FactoryName
        FROM localfactname)

      AND s.FinYear IN (SELECT
          Years
        FROM localyears)

      AND s.MonthName IN (SELECT
          Months
        FROM localmonths)
      ORDER BY s.FinYear, s.MonthName, s.SoldToName;

    END IF;
  END IF;
  TRUNCATE TABLE localpsaleman;
  TRUNCATE TABLE localfactname;
  TRUNCATE TABLE localyears;
  TRUNCATE TABLE localmonths;
  TRUNCATE TABLE localcust;
END
$$

--
-- Create procedure `sp_SearchTransactionInfoDatewise21`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_SearchTransactionInfoDatewise21 (IN start_date varchar(11), IN end_date varchar(11), IN IsDatewise boolean)
BEGIN
  IF (IsDatewise) THEN
    SELECT
      *
    FROM salestrasaction s
    WHERE s.CreatedDate BETWEEN start_date AND end_date
    AND s.SalesmanCode IN (SELECT
        SalesmanCode
      FROM localpsaleman)

    AND s.FactoryName IN (SELECT
        FactoryName
      FROM localfactname);

  ELSE
    SELECT
      *
    FROM salestrasaction s
    WHERE s.SalesmanCode IN (SELECT
        SalesmanCode
      FROM localpsaleman)

    AND s.FactoryName IN (SELECT
        FactoryName
      FROM localfactname)

    AND s.FinYear IN (SELECT
        Years
      FROM localyears)

    AND s.MonthName IN (SELECT
        Months
      FROM localmonths)
    ORDER BY s.CreatedDate;


  END IF;
  TRUNCATE TABLE localpsaleman;
  TRUNCATE TABLE localfactname;
  TRUNCATE TABLE localyears;
  TRUNCATE TABLE localmonths;
END
$$

--
-- Create procedure `sp_SearchTransactionInfoDatewise`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_SearchTransactionInfoDatewise (IN start_date varchar(11), IN end_date varchar(11))
BEGIN
  IF (start_date IS NULL
    OR start_date = ''
    OR end_date IS NULL
    OR end_date = '') THEN
    SELECT
      *
    FROM salestrasaction s
    WHERE s.SalesmanCode IN (SELECT
        SalesmanCode
      FROM localpsaleman)
    AND s.FactoryName IN (SELECT
        FactoryName
      FROM localfactname)
    ORDER BY s.CreatedDate;

  ELSE

    SELECT
      *
    FROM salestrasaction s
    WHERE s.CreatedDate BETWEEN start_date AND end_date
    AND s.SalesmanCode IN (SELECT
        SalesmanCode
      FROM localpsaleman)
    AND s.FactoryName IN (SELECT
        FactoryName
      FROM localfactname);

  END IF;
  TRUNCATE TABLE localpsaleman;
  TRUNCATE TABLE localfactname;
END
$$

--
-- Create procedure `sp_GetTransactionInfo`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_GetTransactionInfo ()
BEGIN
  SELECT
    t.TrasactionId,
    t.InvoiceNo,
    t.CustId,
    t.SoldToName,
    t.SoldToAddress,
    t.SoldToState,
    t.SalesmId,
    s.SalesmanName,
    t.FactoryId,
    f.FactoryName,
    t.CommissionRulesId,
    t.SoldToName,
    t.ShipToAddress,
    t.SoldToCity,
    t.SoldToState,
    t.TotalSalesAmt,
    t.GrossCommRate,
    t.GrossCommAmt,
    t.SalesmanCommAmt,
    t.CreatedDate,
    t.CreatedBy,
    t.UpdatedDate,
    t.UpdatedBy,
    t.IsActive,
    t.FinYear
  FROM salestrasaction t
    LEFT JOIN customer c
      ON t.CustId = c.CustId
    LEFT JOIN salesman s
      ON t.SalesmId = s.SalesmId
    LEFT JOIN factory f
      ON t.CustId = f.FactoryId
    LEFT JOIN commissionrules r
      ON t.CommissionRulesId = r.CommissionRulesId

  ORDER BY t.TrasactionId;
END
$$

--
-- Create procedure `sp_GetTransactionCustomers`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_GetTransactionCustomers ()
BEGIN
  SELECT
  DISTINCT
    CustId,

    SoldToName AS CustomerName

  FROM salestrasaction


  ORDER BY SoldToName;
END
$$

--
-- Create procedure `SP_GetFactoryInfo`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE SP_GetFactoryInfo ()
BEGIN
  SELECT
    f.FactoryId,
    c.FactoryCategoryId,
    c.FactoryCategoryName,
    f.FactoryName,
    f.PrincCode,
    f.CreatedDate,
    f.CreatedBy,
    f.UpdatedDate,
    f.UpdatedBy,
    f.IsActive

  FROM factory f,
       factorycategory c
  WHERE c.FactoryCategoryId = f.FactoryCategoryId
  ORDER BY f.FactoryId, c.FactoryCategoryName;
END
$$

--
-- Create procedure `sp_GetCustomersInfo`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_GetCustomersInfo ()
BEGIN

  SELECT

    c.CustId,
    c.CustomerName,
    c.CustAliasName,
    c.EmailId,
    c.BranchName,
    c.Address,
    c.City,
    c.State,
    c.Zip,
    c.Contact,
    c.Mobile,
    c.Phone,
    c.Territory,
    DATE_FORMAT(c.CreatedDate, '%m-%d-%Y'),

    c.CreatedBy,

    DATE_FORMAT(c.UpdatedDate, '%m-%d-%Y'),
    c.UpdatedBy,
    c.IsActive,
    c.SalesmanId,
    c.CustomSalesCommRate,
    s.SalesmanCode,
    s.SalesmanName

  FROM customer c
    LEFT JOIN salesman s
      ON c.SalesmanId = s.SalesmId
  WHERE CustomerName IS NOT NULL

  ORDER BY c.CustId;


END
$$

--
-- Create procedure `sp_GetCommRules`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_GetCommRules (IN id int)
BEGIN
  IF (id = 0) THEN

    SELECT
      r.CommissionRulesId,
      r.CustId,
      c.CustomerName,
      r.FactoryCategoryId,
      r.FactoryId,
      f.FactoryName,
      f.PrincCode,
      r.CommisionRate,
      r.CreatedDate,
      r.CreatedBy,
      r.UpdatedDate,
      r.UpdatedBy,
      r.IsActiveForAll,
      r.IsActive,
      r.FinYearId
    FROM commissionrules r
      LEFT JOIN customer c
        ON r.CustId = c.CustId
      LEFT JOIN factory f
        ON r.FactoryId = f.FactoryId


    ORDER BY r.CommissionRulesId, r.CreatedDate;

  ELSE
    SELECT
      r.CommissionRulesId,
      r.CustId,
      c.CustomerName,
      r.FactoryCategoryId,
      r.FactoryId,
      f.FactoryName,
      f.PrincCode,
      r.CommisionRate,
      r.CreatedDate,
      r.CreatedBy,
      r.UpdatedDate,
      r.UpdatedBy,
      r.IsActiveForAll,
      r.IsActive,
      r.FinYearId
    FROM commissionrules r
      LEFT JOIN customer c
        ON r.CustId = c.CustId
      LEFT JOIN factory f
        ON r.FactoryId = f.FactoryId

    WHERE r.CommissionRulesId = id
    ORDER BY r.CommissionRulesId, r.CreatedDate;

  END IF;


END
$$

--
-- Create procedure `sp_DeActiveTransaction`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_DeActiveTransaction (IN TId bigint)
BEGIN

  UPDATE salestrasaction s
  SET s.IsActive = FALSE,
      s.UpdatedDate = NOW()
  WHERE s.TrasactionId = TId;

END
$$

--
-- Create procedure `sp_ActiveTransaction`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_ActiveTransaction (IN TId bigint)
BEGIN

  UPDATE salestrasaction s
  SET s.IsActive = TRUE,
      s.UpdatedDate = NOW()
  WHERE s.TrasactionId = TId;

END
$$

--
-- Create procedure `IsExistSalesmanInCustomer`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IsExistSalesmanInCustomer (IN id int)
BEGIN
  SELECT
    *
  FROM customer
  WHERE SalesmanId = id;
END
$$

--
-- Create procedure `IsExistFactoryIdInSalesTrasaction`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IsExistFactoryIdInSalesTrasaction (IN id int)
BEGIN
  SELECT
    *
  FROM salestrasaction
  WHERE FactoryId = id;
END
$$

--
-- Create procedure `IsExistFactoryIdInCommissionrules`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IsExistFactoryIdInCommissionrules (IN id int)
BEGIN
  SELECT
    *
  FROM Commissionrules
  WHERE FactoryId = id;
END
$$

--
-- Create procedure `IsExistCustomerInSalesTrasaction`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IsExistCustomerInSalesTrasaction (IN id int)
BEGIN
  SELECT
    *
  FROM salestrasaction
  WHERE CustId = id;
END
$$

--
-- Create procedure `IsExistCustomerInCommRules`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IsExistCustomerInCommRules (IN id int)
BEGIN
  SELECT
    *
  FROM commissionrules
  WHERE CustId = id;
END
$$

--
-- Create procedure `GetAllfactorycategory`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE GetAllfactorycategory ()
BEGIN
  SELECT
    FactoryCategoryId,
    FactoryCategoryName
  FROM factorycategory
  WHERE IsActive = TRUE;
END
$$

DELIMITER ;

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;